---
title: "The Wrong Stuff"
title-block-banner: "#FDB827"
author:
  - Isabelle Schmidt
  - Liam Jennings
  - Tiger Teng
date: "July 26, 2024"
affiliation: Carnegie Mellon University Sports Analytics Camp & Pittsburgh Pirates 
toc: true
format:
  html:
    page-layout: full
    mainfont: "Arial"
    fontcolor: "black"
    theme: cosmo
    html-math-method: katex
    self-contained: true
    include-in-header: 
      text: |
        <style>
        .title, .quarto-title, .header-title, .document-title, h1  {
        color: white;
        }
        h2 {
        color: #27251F;
        }
        </style>
    style: |
      h1, h2, h3, h4, h5, h6 {
        text-align: center;
      }
execute:
  echo: false
  warning: false
  message: false
---

---

```{r}
library(tidyverse)
library(dslabs)
library(broom)
library(plotly)
library(gapminder)
library(gridExtra)
library(baseballr)
library(ggthemes)
library(hexbin)

## set theme
theme_set(theme_bw())

# Customizes a color scale for the scatterplots
color_scale2 <- scale_colour_manual(values = c("darkred","orange2", "darkslategray","darkgoldenrod3", "violetred4"))


# Creates a custom theme for all the plots
theme <- theme(legend.position = "none",
        plot.title = element_text(face = "bold", hjust = 0.5, size = 13),
        axis.title = element_text(face = "bold", size = 12),
        axis.text = element_text(face = "bold"),
        strip.text = element_text(face = "bold", size = 12, lineheight = 3.0),
        strip.background = element_rect(fill = "steelblue4", colour = "black"),
        strip.text.x = element_text(color = "white"))

## create own theme for hexbin graphs
movement_theme <- function(){
  theme(
    strip.text = element_text(face = "bold", size = rel(1.5), color = "white"),
    strip.background = element_rect(fill = "navy", color = "black", linewidth = 1),
    plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
    plot.subtitle = element_text(size = 16, face = "bold", hjust = 0.5),
    plot.caption = element_text(size = 10),
    axis.title.x = element_text(size = 18, face = "bold", hjust = 0.5),
    axis.title.y = element_text(size = 18, face = "bold", hjust = 0.5),
    axis.text.x = element_text(size = 12, hjust = 0.5),
    axis.text.y = element_text(size = 12, hjust = 0.5),
    legend.position = "bottom",
    legend.title.position = "top",
    legend.title = element_text(size = 16, face = "bold", hjust = 0.5),
    legend.key.size = unit(0.35, "inches"),
    legend.text = element_text(size = 12),
    panel.spacing = unit(1, "lines")
  )
}

# Reads in combined Baseball Savant and Statcast data
pitching_stats <- read.csv("C:/Users/Tiger/Downloads/mlb_pitching_stats_2020-24 (1).csv")

# Filters data to only include fastballs and converts season to categorical
fastball_data <- pitching_stats |> 
  filter(pitch_name == "4-Seam Fastball", !is.na(stuff_plus), season %in% c(2021, 2022, 2023)) |>   
  mutate(season = factor(season))

## Changed horizontal break to different viewpoint for hexplots
hexplot_models <- fastball_data |> 
  mutate(horizontal_break = -horizontal_break)
```

## Executive Summary

## Introduction 
In the fast-paced environment of Major League Baseball, Stuff+ serves as a vital metric for evaluating the 'nastiness' of a pitch. The pitching metric analyzes physical characteristics of a pitch including velocity, spin, extension, and movement to evaluate its effectiveness. It is measured so that a Stuff+ score of 100 represents a pitch that is considered league average for pitches thrown in that pitch-type and anything above or below 100 is considered above or below average respectively. 

With Stuff+ becoming a common metric used to evaluate pitchers, we wanted to assess how accurately the model was actually predicting a pitcher's success and how appropriately it was weighing the factors that go into it. We also were curious to know if there were commonalities between the pitches that Stuff+ tended to over or under value, telling us it was not accounting for variables that played a role in a pitcher's effectiveness. 

By answering these questions, we hope to provide valuable information to help build a better Stuff+ model so that it becomes a more reliable metric for people involved in player acquisition. We also believe that getting a better understanding of which physical pitch characteristics play a larger role in success can help pitchers develop their own pitches in a way that allows them to be more successful. 

Our analysis is concentrated on the 4-seam fastball, with plans to extend this research to other types of pitches in future studies.

## Data
For our analysis, we used FanGraphs and Statcast data from 2021 to 2023. Although FanGraphs does have Stuff+ data for the 2020 and 2024 seasons as well, we decided not to include them because we wanted to limit bias. In both 2020 and 2024 there is minimal data due to Covid-19 or an incomplete season respectively. We downloaded the FanGraphs data by web scraping using the baseballr library and the Statcast data from Baseball Savant. 

#### **FanGraphs Data:**

The FanGraphs data provides each pitcher's Stuff+ for each pitch they throw in each season. Note that unless specified otherwise, when we say pitch throughout this paper, we are referring to pitch name and not an individual pitch. This data was originally formatted so that each row provided information about a pitcher in a given year. However, we used pivot longer to make each row represent a pitcher in a given year for a specific pitch. For example, instead of one row having information about all of Paul Skenes' pitches from the 2024 season, it became that one row had information about Paul Skenes' sinker in the 2024 season and another had information about his 4-seam fastball in the 2024 season. 

##### **Statcast Data:**

Statcast's data, on the other hand, is pitch-by-pitch data that gives information about all the individual pitches thrown. From the Statcast data, we initially looked at the pitch physical characteristics used to measure Stuff+, as well as, run value and outcome description. For each pitch physical characteristic individually and run value per 100 pitches, we grouped the data by season, pitcher, and pitch name to calculate each pitcher's average for each pitch in each season. Using the same grouping and the outcome description, we calculated each pitcher's whiff percentage, expected wOBA (xwOBA), swing and miss percentage, and swing percentage for each pitch in each season. We also calculated the number of times each pitcher threw each pitch in each season. 



**Combining the Data:**

Once all these values were calculated, we combined the FanGraphs Dataset to the Statcast Dataset to evaluate all these metrics simultaneously. It is also important to note that in our analysis, we only included pitchers that threw the given pitch 100 or more times to limit bias in our results. 


## Exploratory Data Analysis (EDA)
In our initial analysis, we decided to focus on the 4-seam fastball, often known as the rising fastball. In all of the seasons we analyzed, it was by far the most commonly used pitch. In addition... ** Ask Liam about Dodgers bringing it back in 2017?** 

With the 4-seam fastball on the rise, we wanted to know how the effectiveness of the pitch was changing from year-to-year. Intuitively it would make sense for the pitch to become less effective with time because batters are seeing it more frequently and adjusting. To see if this was true, we looked at the relationship between each pitch physical characteristic individually and an outcome variable. 

Our group decided to focus primarily on whiff percentage and expected weighted on-base average for our outcome variables because we felt like the combination gave us a lot of insight. We liked that whiff percentage gave us an idea of whether or not people were making contact with the pitch while expected weighted on-base average gave us an idea of (a) whether or not people were able to get on base and (b) how well people were making contact with the pitch.

::: {.panel-tabset}

## Velocity

::: {.panel-tabset}

## xwOBA

```{r}
#| out-width: 100%
#| 
# Graph of the relationship between a pitcher's average 4-Seam Fastball velocity and average xwOBA value
fastball_data |> 
  ggplot(aes(x = velocity, y = xwOBA)) +
  geom_point(aes(color = season), alpha = .3) +
  geom_smooth(method = "lm", se = FALSE, color = "black") +
  facet_wrap(~season) +
  labs(title = "Relationship Between Velocity And xwOBA For A 4-Seam Fastball",
       x = "Pitcher's Average Velocity",
       y = "Pitcher's Average xwOBA Value") +
  color_scale2 +
  theme
```

**Figure 1 Key Takeaways:**

## Whiff Percentage 

```{r}
#| out-width: 100%
#| 
# Graph of the relationship between a pitcher's average 4-Seam Fastball velocity and whiff percentage
fastball_data |> 
  ggplot(aes(x = velocity, y = whiff_pct)) +
  geom_point(aes(color = season), alpha = .3) +
  geom_smooth(method = "lm", se = FALSE, color = "black") +
  facet_wrap(~season) +
  labs(title = "Relationship Between Velocity And Whiff % For A 4-Seam Fastball",
       x = "Pitcher's Average Velocity",
       y = "Pitcher's Whiff Percentage") +
  color_scale2 +
  theme
```

**Figure 2 Key Takeaways:**

:::


## Vertical Break 

::: {.panel-tabset}

## xwOBA

```{r}
#| out-width: 100%
# Graph of the relationship between a pitcher's average 4-Seam Fastball induced vertical break and average xwOBA value

fastball_data |> 
  ggplot(aes(x = induced_vertical_break, y = xwOBA)) +
  geom_point(aes(color = season), alpha = .3) +
  geom_smooth(method = "lm", se = FALSE, color = "black") +
  facet_wrap(~season) +
  labs(title = "Relationship Between Vertical Break And xwOBA For A 4-Seam Fastball",
       x = "Pitcher's Average Induced Vertical Break",
       y = "Pitcher's Average xwOBA Value") +
  color_scale2 +
  theme
```

**Figure 3 Key Takeaways:**

## Whiff Percentage 

```{r}
#| out-width: 100%
# Graph of the relationship between a pitcher's average 4-Seam Fastball induced vertical break and whiff percentage

fastball_data |> 
  ggplot(aes(x = induced_vertical_break, y = whiff_pct)) +
  geom_point(aes(color = season), alpha = .3) +
  geom_smooth(method = "lm", se = FALSE, color = "black") +
  facet_wrap(~season) +
  labs(title = "Relationship Vertical Break And Whiff % For A 4-Seam Fastball",
       x = "Pitcher's Average Induced Vertical Break",
       y = "Pitcher's Whiff Percentage") +
  color_scale2 +
  theme
```

**Figure 4 Key Takeaways:**

:::

## Horizontal Break  

::: {.panel-tabset}

## xwOBA

```{r}
#| out-width: 100%
# Graph of the relationship between a pitcher's average 4-Seam Fastball horizontal break and average xwOBA value

fastball_data|> 
  ggplot(aes(x = horizontal_break, y = xwOBA)) +
  geom_point(aes(color = season), alpha = .3) +
    geom_smooth(method = "lm", se = FALSE, color = "black") +
  facet_wrap(~season) +
  labs(title = "Relationship Between Horizontal Break And xwOBA For A 4-Seam Fastball",
       x = "Pitcher's Average Horizontal Break",
       y = "Pitcher's Average xwOBA Value") +
  color_scale2 +
  theme
```

**Figure 5 Key Takeaways:**

## Whiff Percentage 

```{r}
#| out-width: 100%
# Graph of the relationship between a pitcher's average 4-Seam Fastball horizontal break and whiff percentage 
fastball_data |> 
  ggplot(aes(x = horizontal_break, y = whiff_pct)) +
  geom_point(aes(color = season), alpha = .3) +
  geom_smooth(method = "lm", se = FALSE, color = "black") +
  facet_wrap(~season) +
  labs(title = "Relationship Between Horizontal Break And Whiff % For A 4-Seam Fastball",
       x = "Pitcher's Average Horizontal Break",
       y = "Pitcher's Whiff Percentage") +
  color_scale2 +
  theme
```

**Figure 6 Key Takeaways:**

:::

## Spin Rate   

::: {.panel-tabset}

## xwOBA

```{r}
#| out-width: 100%

# Graph of the relationship between a pitcher's average 4-Seam Fastball spin rate and average xwOBA value
fastball_data|> 
  ggplot(aes(x = spin, y = xwOBA)) +
  geom_point(aes(color = season), alpha = .3) +
  geom_smooth(method = "lm", se = FALSE, color = "black") +
  facet_wrap(~season) +
  labs(title = "Relationship Between Spin And xwOBA For A 4-Seam Fastball",
       x = "Pitcher's Average Spin Rate",
       y = "Pitcher's Average xwOBA") +
  color_scale2 +
  theme 
```

**Figure 7 Key Takeaways:**

## Whiff Percentage 

```{r}
#| out-width: 100%

# Graph of the relationship between a pitcher's average 4-Seam Fastball spin rate and whiff percentage
fastball_data |> 
  ggplot(aes(x = spin, y = whiff_pct)) +
  geom_point(aes(color = season), alpha = .3) +
  geom_smooth(method = "lm", se = FALSE, color = "black") +
  facet_wrap(~season) +
  labs(title = "Relationship Between Spin And Whiff Percentage For A 4-Seam Fastball",
       x = "Pitcher's Average Spin Rate",
       y = "Pitcher's Whiff Percentage") +
  theme +
  color_scale2 +
  theme(plot.title = element_text(size = 11))
```

**Figure 8 Key Takeaways:**

:::

## Extension   

::: {.panel-tabset}

## xwOBA

```{r}
#| out-width: 100%

# Graph of the relationship between a pitcher's average 4-Seam Fastball release extension and average xwOBA value
fastball_data |> 
  ggplot(aes(x = extension, y = xwOBA)) +
  geom_point(aes(color = season), alpha = .3) +
  geom_smooth(method = "lm", se = FALSE, color = "black") +
  facet_wrap(~season) +
  labs(title = "Relationship Extension And xwOBA For A 4-Seam Fastball",
       x = "Pitcher's Average Extension",
       y = "Pitcher's Average xwOBA Value") +
  color_scale2 +
  theme
```

**Figure 9 Key Takeaways:**

## Whiff Percentage 

```{r}
#| out-width: 100%

# Graph of the relationship between a pitcher's average 4-Seam Fastball release extension and whiff percentage
fastball_data |> 
  ggplot(aes(x = extension, y = whiff_pct)) +
  geom_point(aes(color = season), alpha = .3) +
  geom_smooth(method = "lm", se = FALSE, color = "black") +
  facet_wrap(~season) +
  labs(title = "Relationship Extension And Whiff Percentage For A 4-Seam Fastball",
       x = "Pitcher's Average Extension",
       y = "Pitcher's Whiff Percentage") +
  color_scale2 +
  theme +
  theme(plot.title = element_text(size = 10)) 
```

**Figure 10 Key Takeaways:**

:::
:::

Given the hype around the rising fastball, we expected that induced vertical break would play a large role in both whiff percentage and expected wOBA. To our surprise, the change in whiff percentage and expected wOBA per inch of induced vertical movement was much less than expected. We also found that the change in both of those outcome variables per inch of horizontal movement was more than we expected. This peaked our interest into farther analyzing how movement related to both outcome and pitch physical characteristic variables and how this change varied from year-to-year. With the hopes to further our understanding, we made plots that looked at how vertical and horizontal movement combined impacted these variables. 

::: {.panel-tabset}

## Movement & Velocity

```{r}
#| out-width: 100%
### velocity
hexplot_models |> 
  # plot
  ggplot() + 
  # create the bins by stuff+
  stat_summary_hex(aes(x = horizontal_break, y = induced_vertical_break,
                       z = velocity), 
                   binwidth = c(3, 3), fun = mean,
                   color = "black") +
  # create color gradient with avg velocity as the middle color
  scale_fill_gradient2(low = "dodgerblue2",
                       mid = "white",
                       high = "firebrick2",
                       # average velocity
                       midpoint = mean(fastball_data$velocity),
                       breaks = seq(85, 100, 5),
                       labels = c(85, 90, 95, 100),
                       limits = c(85, 100)) +
  # 0 inches of horizontal movement
  geom_vline(xintercept = 0, color = "black", linewidth = 1.25) +
  # 0 inches of vertical movement
  geom_hline(yintercept = 0, color = "black", linewidth = 1.25) +
  # average horizontal break
  geom_vline(aes(xintercept = mean(horizontal_break)),
             color = "firebrick1", linewidth = 1.25, linetype = "dashed") +
  # average induced vertical break
  geom_hline(aes(yintercept = mean(induced_vertical_break)), 
             color = "firebrick1", linewidth = 1.25, linetype = "dashed") +
  # hand side label
  geom_label(label = "HAND SIDE", x = 16.7, y = 0,
             label.padding = unit(0.35, "lines"),
             label.r = unit(0.25, "lines"),
             label.size = 1,
             size.unit = "mm") +
  # glove side label
  geom_label(label = "GLOVE SIDE", x = -1.2, y = 0,
             label.padding = unit(0.35, "lines"),
             label.r = unit(0.25, "lines"),
             label.size = 1,
             size.unit = "mm") +
  # create breaks and add inches format to y axis
  scale_y_continuous(breaks = seq(-20, 20, 5),
                     labels = scales::number_format(suffix = "\"")) +
  # create breaks and add inches format to x axis
  scale_x_continuous(breaks = seq(-20, 20, 5),
                     labels = scales::number_format(suffix = "\"")) +
  coord_fixed() +
  # labels
  labs(
    title = "4-Seam Fastball Velocity by Pitch Movement",
    subtitle = "POV: Right-Handed Pitcher Facing Home Plate",
    caption = "All pitchers with 100 or more fastballs thrown in a year",
    x = "Horizontal Movement (in)",
    y = "Vertical Movement (in)", 
    fill = "Velocity (MPH)") +
  # add theme function created above
  movement_theme() +
  # facet by each season
  facet_wrap(~ season)
```

**Figure 11 Key Takeaways:**

## Movement & Spin Rate

```{r}
#| out-width: 100%
```

**Figure 12 Key Takeaways:**

## Movement & xwOBA

```{r}
#| out-width: 100%
```

**Figure 13 Key Takeaways:**

## Movement & Whiff Percentage

```{r}
#| out-width: 100%
```

**Figure 14 Key Takeaways:**
:::

Through the relationship and hex plots we were able to see that the importance of each pitch physical characteristic for determining the effectiveness of a 4-seam fastball was in fact changing year-by-year. This made us wonder if the Stuff+ model was adjusting as well. For this, we observed the relationship between each pitch physical characteristic individually and Stuff+. Again, we initially looked at each pitch physical characteristic individually and after observed vertical and horizontal movement simultaneously. 

::: {.panel-tabset}

## Velocity

```{r}
#| out-width: 100%
# Graph of the relationship between a pitcher's average 4-Seam Fastball velocity and its average stuff+
fastball_data |> 
  ggplot(aes(x = velocity, y = stuff_plus)) +
  geom_point(aes(color = season), alpha = .3) +
  geom_smooth(method = "lm", se = FALSE, color = "black") +
  facet_wrap(~season) +
  labs(title = "Relationship Between Velocity And Stuff+ For 4-Seam Fastballs",
       x = "Pitcher's Average Velocity",
       y = "Pitcher's Average Stuff+") +
   color_scale2 +
   theme
```

**Figure 15 Key Takeaways:**

## Vertical Break 

```{r}
#| out-width: 100%

# Graph of the relationship between a pitcher's average 4-Seam Fastball induced vertical break and its average stuff+
fastball_data |> 
  ggplot(aes(x = induced_vertical_break, y = stuff_plus)) +
  geom_point(aes(color = season), alpha = .3) +
  geom_smooth(method = "lm", se = FALSE, color = "black") +
  facet_wrap(~season) +
  labs(title = "Relationship Between Vertical Break And Stuff+ For 4-Seam Fastballs",
       x = "Pitcher's Average Induced Vertical Break",
       y = "Pitcher's Average Stuff+") +
  color_scale2 +
  theme
```

**Figure 16 Key Takeaways:**

## Horizontal Break  

```{r}
#| out-width: 100%
# Graph of the relationship between a pitcher's average 4-Seam Fastball horizontal break and its average stuff+

fastball_data |> 
  ggplot(aes(x = horizontal_break, y = stuff_plus)) +
  geom_point(aes(color = season), alpha = .3) +
  geom_smooth(method = "lm", se = FALSE, color = "black") +
  facet_wrap(~season) +
  labs(title = "Relationship Between Horizontal Break And Stuff+ For 4-Seam Fastballs",
       x = "Pitcher's Average Horizontal Break",
       y = "Pitcher's Average Stuff+") +
  color_scale2 +
  theme
```

**Figure 17 Key Takeaways:**

:::

Goes into methods: 
- Found it was hard to eyeball so created the slope plots to quantify the difference - used linear models with season as the interaction variable
- From these graphs we only continued to see that there were some characteristics that appeared to be undervalued and others that appeared to be overvalued. We thought of xwOBA and whiff percentage the most important for evaluating a pitcher's success so we compared how the stuff+ model valued those in each year compared to how much it mattered for whiff percentage and xwOBA in each year. 

Future Work: 

_ If have time then say we wanted to see if similar trends were happening with slider/ sweepers since those were becoming more popular. 

* Probably do not need to include but could show how that sweeper is more popular


Notes on data part:
4. Give information about how many observations were in the data and how many we took out

Describe the data you’re using in detail, where you accessed it, along with relevant exploratory data analysis (EDA). You should also include descriptions of any major data pre-processing/cleaning steps.

## Methods

To make it easier to evaluate whether or not the Stuff+ model was changing effectively, we made linear models that better represented how each additional unit of a physical characteristic impacted Stuff+, whiff percentage, and expected on-base average. 

::: {.panel-tabset}

```{r}
velocity_slope <- function(tidy_dataset){

  # Calculates the slope of the line for each year
  slope <- tidy_dataset |> 
    select(term, estimate) |> 
  mutate(term = recode(term, "velocity" = "velocity_2021")) |> 
  pivot_wider(names_from = term, values_from = estimate) |> 
  select(velocity_2021:`season2023:velocity`) |> 
  mutate(slope2022 = velocity_2021 + `season2022:velocity`, 
         slope2023 = velocity_2021 + `season2023:velocity`) |> 
  select(velocity_2021, slope2022, slope2023) |> 
  pivot_longer(cols = c(velocity_2021, slope2022:slope2023), names_to = "season", values_to = "slope") |> 
  mutate(season = str_extract(season, "\\d{4}"))
  
  # Extracts the std_error for each year
  std_error <- tidy_dataset |> 
  mutate(term = recode(term, "velocity" = "velocity_2021")) |>
  select(term, std.error) |> 
  filter(term == c("velocity_2021", "season2022:velocity", "season2023:velocity"))|> 
    rename(season = term) |> 
    mutate(season = str_extract(season, "\\d{4}"))
  
  # Joins the slope and std_erros into one dataset
  full_join(slope, std_error)  
}
```

```{r}
# Linear Model For Stuff Plus and Velocity
# Linear model for velocity and stuff+
velocity_lm <- lm(stuff_plus ~ season * velocity, 
                data = fastball_data) 

summary(velocity_lm)
tidy_velocity_lm <-tidy(velocity_lm)

# Calls the function above that calculates the slope of the linear model for each year
velocity_stuff_plus_slope <- velocity_slope(tidy_velocity_lm)
```

```{r}
# Linear model for velocity predicting whiff percentage
velocity_whiff_lm <- lm(whiff_pct ~ season * velocity, 
                data = fastball_data) 

summary(velocity_whiff_lm)
tidy_velocity_whiff_lm <-tidy(velocity_whiff_lm)

# Calls the function above that calculates the slope of the linear model for each year
velocity_whiff_slope <- velocity_slope(tidy_velocity_whiff_lm)
```

```{r}
# Linear Model For xwOBA and Velocity
velocity_xwOBA <- lm(xwOBA ~ season * velocity, 
                data = fastball_data) 


summary(velocity_xwOBA)
tidy_velocity_xwOBA <- tidy(velocity_xwOBA)

# Calls the function above that calculates the slope of the linear model for each year
velocity_xwOBA_slope <- velocity_slope(tidy_velocity_xwOBA)
```

## Velocity

::: {.panel-tabset}

## Stuff+ And wxOBA

```{r}
#| out-width: 100%
# Graph of Slope For Each Year's Velocity and Stuff+ Linear Model
stuff_plus <- velocity_stuff_plus_slope |> 
  mutate(ymin = slope - std.error, ymax = slope + std.error) |> 
  ggplot() +
  geom_line(mapping = aes(x = season, y = slope), size = 1, group = 1, color = "red") +
  geom_point(mapping = aes(x = season, y = slope), color = "black", size = 2) +
  geom_errorbar(mapping = aes(x = season, ymin = ymin, ymax = ymax), width = 0.2, position = position_dodge(0.05)) +
  labs(title = "Velocity's Impact on Stuff+",
       x = "Year",
       y = "Change in Stuff+ Per MPH of Velocity") +
  theme + 
  theme(axis.title.y = element_text(size = 10),
        axis.text.x = element_text(size = 10))


# Graph of Slope For Each Year's Velocity and xwOBA Linear Model
xwOBA <- velocity_xwOBA_slope |> 
  mutate(ymin = slope - std.error, ymax = slope + std.error) |>
  ggplot() +
  geom_line(mapping = aes(x = season, y = slope), size = 1, group = 1, color = "red") +
  geom_point(mapping = aes(x = season, y = slope), color = "black", size = 2) +
  geom_errorbar(mapping = aes(x = season, ymin = ymin, ymax = ymax), width = 0.2, position = position_dodge(0.05)) +
  labs(title = "Velocity's Impact on xwOBA",
       x = "Year",
       y = "Change in xwOBA Per MPH of Velocity") +
  theme +
  theme(axis.title.y = element_text(size = 10),
        axis.text.x = element_text(size = 10))

grid.arrange(stuff_plus, xwOBA, ncol=2)

```


**Figure 10 Key Takeaways:**

## Stuff+ And Whiff Percentage

```{r}
#| out-width: 100%

# Graph of Slope For Each Year's Velocity and Whiff Percentage Linear Model
velocity_whiff <- velocity_whiff_slope |> 
  mutate(ymin = slope - std.error, ymax = slope + std.error) |>
  ggplot() +
  geom_line(mapping = aes(x = season, y = slope), size = 1, group = 1, color = "red") +
  geom_point(mapping = aes(x = season, y = slope), color = "black", size = 2) +
  geom_errorbar(mapping = aes(x = season, ymin = ymin, ymax = ymax), width = 0.2, position = position_dodge(0.05)) +
  labs(title = "Velocity's Impact on Whiff %",
       x = "Year",
       y = "Change in Whiff % Per  MPH of Velocity") +
  theme +
  theme(axis.title.y = element_text(size = 10),
        axis.text.x = element_text(size = 10))

grid.arrange(stuff_plus, velocity_whiff, ncol=2)
```

**Figure 11 Key Takeaways:**

:::

## Vertical Movement
```{r}
### Linear Models For Vertical Break and Stuff+ or An Outcome Variable

# Function That Calculates The Slope of The Linear Model For Each Year 
induced_vertical_break_slope <- function(tidy_dataset){

  # Calculates the slope of the line for each year
  slope <- tidy_dataset |> 
    select(term, estimate) |> 
  mutate(term = recode(term, "induced_vertical_break" = "induced_vertical_break_2021")) |> 
  pivot_wider(names_from = term, values_from = estimate) |> 
  select(induced_vertical_break_2021:`season2023:induced_vertical_break`) |> 
  mutate(slope2022 = induced_vertical_break_2021 + `season2022:induced_vertical_break`, 
         slope2023 = induced_vertical_break_2021 + `season2023:induced_vertical_break`) |> 
  select(induced_vertical_break_2021, slope2022, slope2023) |> 
  pivot_longer(cols = c(induced_vertical_break_2021, slope2022, slope2023), names_to = "season", values_to = "slope") |> 
  mutate(season = str_extract(season, "\\d{4}"))
  
  # Extracts the std_error for each year
  std_error <- tidy_dataset |> 
  mutate(term = recode(term, "induced_vertical_break" = "induced_vertical_break_2021")) |>
  select(term, std.error) |> 
  filter(term == c("induced_vertical_break_2021", "season2022:induced_vertical_break", "season2023:induced_vertical_break"))|> 
    rename(season = term) |> 
    mutate(season = str_extract(season, "\\d{4}"))
  
  # Joins the slope and std_errors into one dataset
  full_join(slope, std_error)
}
```

```{r}
# Linear model for induced_vertical break and stuff+
induced_vertical_break_lm <- lm(stuff_plus ~ season * induced_vertical_break, 
                data = fastball_data) 

tidy_induced_vertical_break_lm <-tidy(induced_vertical_break_lm)

# Calls the function above that calculates the slope of the linear model for each year
v_break_stuff_plus_slope <- induced_vertical_break_slope(tidy_induced_vertical_break_lm)


# Linear model for Induced Vertical break predicting whiff percentage
induced_vertical_break_whiff_lm <- lm(whiff_pct ~ season * induced_vertical_break, 
                data = fastball_data) 

tidy_induced_vertical_break_whiff_lm <-tidy(induced_vertical_break_whiff_lm)

# Calls the function above that calculates the slope of the linear model for each year
v_break_whiff_slope <- induced_vertical_break_slope(tidy_induced_vertical_break_whiff_lm)

# Linear Model For xwOBA and Induced Vertical Break
induced_vertical_break_xwOBA <- lm(xwOBA ~ season * induced_vertical_break, 
                data = fastball_data) 


tidy_induced_vertical_break_xwOBA <- tidy(induced_vertical_break_xwOBA)

# Calls the function above that calculates the slope of the linear model for each year
v_break_xwOBA_slope <- induced_vertical_break_slope(tidy_induced_vertical_break_xwOBA)
```
::: {.panel-tabset}

## Stuff+ And xwOBA

```{r}
#| out-width: 100%
# Graph of Slope For Each Year's Induced Vertical Break and Stuff+ Linear Model
stuff_plus_vertical <- v_break_stuff_plus_slope |> 
  mutate(ymin = slope - std.error, ymax = slope + std.error) |>
  ggplot() +
  geom_line(mapping = aes(x = season, y = slope), size = 1, group = 1, color = "red") +
  geom_point(mapping = aes(x = season, y = slope), color = "black", size = 2) +
  geom_errorbar(mapping = aes(x = season, ymin = ymin, ymax = ymax), width = 0.2, position = position_dodge(0.05)) +
  labs(title = "Vertical Break's Impact on Stuff+",
      x = "Year",
      y = "Change in Stuff+ Per Inch of Induced Vertical Break") +
  theme + 
  theme(axis.title.y = element_text(size = 9.5),
        axis.text.x = element_text(size = 10))
 
xwOBA_vertical <- v_break_xwOBA_slope |> 
  mutate(ymin = slope - std.error, ymax = slope + std.error) |> 
  ggplot() +
  geom_line(mapping = aes(x = season, y = slope), size = 1, group = 1, color = "red") +
  geom_point(mapping = aes(x = season, y = slope), color = "black", size = 2) +
  geom_errorbar(mapping = aes(x = season, ymin = ymin, ymax = ymax), width = 0.2, position = position_dodge(0.05)) +
  geom_errorbar(mapping = aes(x = season, ymin = ymin, ymax = ymax), width = 0.2, position = position_dodge(0.05)) +
  labs(title = "Vertical Break's Impact on xwOBA",
       x = "Year",
       y = "Change in xwOBA Per Inch of Induced Vertical Break") +
  theme +
  theme(axis.title.y = element_text(size = 9.5),
        axis.text.x = element_text(size = 10))

grid.arrange(stuff_plus_vertical, xwOBA_vertical, ncol=2)
```

**Figure 12 Key Takeaways:**

## Stuff+ And Whiff Percentage

```{r}
#| out-width: 100%
# Graph of Slope For Each Year's Induced Vertical Break and Whiff Percentage Linear Model
whiff_vertical <- v_break_whiff_slope |>
  mutate(ymin = slope - std.error, ymax = slope + std.error) |>
  ggplot() +
  geom_line(mapping = aes(x = season, y = slope), size = 1, group = 1, color = "red") +
  geom_point(mapping = aes(x = season, y = slope), color = "black", size = 2) +
  geom_errorbar(mapping = aes(x = season, ymin = ymin, ymax = ymax), width = 0.2, position = position_dodge(0.05)) +
  labs(title = "Vertical Break's Impact on Whiff %",
       x = "Year",
       y = "Change in Whiff % Per Inch of Induced Vertical Break") +
  theme +
  theme(axis.title.y = element_text(size = 9.5),
        axis.text.x = element_text(size = 10))

grid.arrange(stuff_plus_vertical, whiff_vertical, ncol=2)
```

**Figure 13 Key Takeaways:**

:::

## Horizontal Movement

::: {.panel-tabset}

```{r}
# Function That Calculates The Slope of The Linear Model For Each Year 
horizontal_break_slope <- function(tidy_dataset){

  # Calculates the slope of the line for each year
  slope <- tidy_dataset |> 
    select(term, estimate) |> 
  mutate(term = recode(term, "horizontal_break" = "horizontal_break_2021")) |> 
  pivot_wider(names_from = term, values_from = estimate) |> 
  select(horizontal_break_2021:`season2023:horizontal_break`) |> 
  mutate(slope2022 = horizontal_break_2021 + `season2022:horizontal_break`,
         slope2023 = horizontal_break_2021 + `season2023:horizontal_break`) |> 
  select(horizontal_break_2021, slope2022:slope2023) |> 
  pivot_longer(cols = c(horizontal_break_2021, slope2022, slope2023), names_to = "season", values_to = "slope") |> 
  mutate(season = str_extract(season, "\\d{4}"))
  
  # Extracts the std_error for each year
  std_error <- tidy_dataset |> 
  mutate(term = recode(term, "horizontal_break" = "horizontal_break_2021")) |>
  select(term, std.error) |> 
  filter(term == c("horizontal_break_2021", "season2022:horizontal_break", "season2023:horizontal_break"))|> 
    rename(season = term) |> 
    mutate(season = str_extract(season, "\\d{4}"))
  
  # Joins the slope and std_erros into one dataset
  full_join(slope, std_error)  
}

# Linear model for horizontal break and stuff+
horizontal_break_lm <- lm(stuff_plus ~ season * horizontal_break, 
                data = fastball_data) 

tidy_horizontal_break_lm <-tidy(horizontal_break_lm)

# Calls the function above that calculates the slope of the linear model for each year
h_break_stuff_plus_slope <- horizontal_break_slope(tidy_horizontal_break_lm)

# Linear model for horizontal break predicting whiff percentage
horizontal_break_whiff_lm <- lm(whiff_pct ~ season * horizontal_break, 
                data = fastball_data) 

tidy_horizontal_break_whiff_lm <-tidy(horizontal_break_whiff_lm)

# Calls the function above that calculates the slope of the linear model for each year
h_break_whiff_slope <- horizontal_break_slope(tidy_horizontal_break_whiff_lm)

horizontal_break_xwOBA <- lm(xwOBA ~ season * horizontal_break, 
                data = fastball_data) 


tidy_horizontal_break_xwOBA <- tidy(horizontal_break_xwOBA)

# Calls the function above that calculates the slope of the linear model for each year
h_break_xwOBA_slope <- horizontal_break_slope(tidy_horizontal_break_xwOBA)
```

## Stuff+ And xwOBA

```{r}
#| out-width: 100%
# Graph of Slope For Each Year's Horizontal Break and Stuff+ Linear Model
stuff_plus_horizontal <- h_break_stuff_plus_slope |> 
  mutate(ymin = slope - std.error, ymax = slope + std.error) |>
  ggplot() +
  geom_line(mapping = aes(x = season, y = slope), size = 1, group = 1, color = "red") +
  geom_point(mapping = aes(x = season, y = slope), color = "black", size = 2) +
  geom_errorbar(mapping = aes(x = season, ymin = ymin, ymax = ymax), width = 0.2, position = position_dodge(0.05)) +
  labs(title = "Horizontal Break's Impact on Stuff+",
       x = "Year",
       y = "Change in Stuff+ Per Inch of Horizontal Break") +
  theme + 
  theme(plot.title = element_text(size = 12),
        axis.title.y = element_text(size = 10),
        axis.text.x = element_text(size = 10))

# Graph of Slope For Each Year's Horizontal Break and xwOBA Linear Model
xwOBA_horizontal <- h_break_xwOBA_slope |> 
  mutate(ymin = slope - std.error, ymax = slope + std.error) |>
  ggplot() +
  geom_line(mapping = aes(x = season, y = slope), size = 1, group = 1, color = "red") +
  geom_point(mapping = aes(x = season, y = slope), color = "black", size = 2) +
  geom_errorbar(mapping = aes(x = season, ymin = ymin, ymax = ymax), width = 0.2, position = position_dodge(0.05)) +
  labs(title = "Horizontal Break's Impact on xwOBA",
       x = "Year",
       y = "Change in xwOBA Per Inch of Horizontal Break") +
  theme +
  theme(plot.title = element_text(size = 12),
        axis.title.y = element_text(size = 10),
        axis.text.x = element_text(size = 10))

grid.arrange(stuff_plus_horizontal, xwOBA_horizontal, ncol=2)
```

**Figure 14 Key Takeaways:**

## Stuff+ And Whiff Percentage 
```{r}
#| out-width: 100%
# Graph of Slope For Each Year's Horizontal Break and Whiff Percentage Linear Model
whiff_horizontal <- h_break_whiff_slope |> 
  mutate(ymin = slope - std.error, ymax = slope + std.error) |>
  ggplot() +
  geom_line(mapping = aes(x = season, y = slope), size = 1, group = 1, color = "red") +
  geom_point(mapping = aes(x = season, y = slope), color = "black", size = 2) +
  geom_errorbar(mapping = aes(x = season, ymin = ymin, ymax = ymax), width = 0.2, position = position_dodge(0.05)) +
  labs(title = "Horizontal Break's Impact on Whiff %",
       x = "Year",
       y = "Change in Whiff % Per Inch of Horizontal Break") +
  theme +
  theme(plot.title = element_text(size = 12),
        axis.title.y = element_text(size = 10),
        axis.text.x = element_text(size = 10))

grid.arrange(stuff_plus_horizontal, whiff_horizontal, ncol=2)
```

**Figure 15 Key Takeaways:**

:::
:::

Describe the modeling techniques you chose, their assumptions, justifications for why they are appropriate for the problem, and your plan for comparison/evaluation approaches.

## Results

Describe your results. This can include tables and plots showing your results, as well as text describing how your models worked and the appropriate interpretations of the relevant output. (Note: Don’t just write out the textbook interpretations of all model coefficients! Instead, interpret the output that is relevant for your question of interest that is framed in the introduction)

## Discussion

Give your conclusions and summarize what you have learned with regards to your question of interest. Are there any limitations with the approaches you used? What do you think are the next steps to follow-up your project?

## Appendix: A quick tutorial

**(Feel free to remove this section when you submit)**

This a Quarto document. 
To learn more about Quarto see <https://quarto.org>.
You can use the Render button to see what it looks like in HTML.

### Text formatting

Text can be bolded with **double asterisks** and italicized with *single asterisks*. 
Monospace text, such as for short code snippets, uses `backticks`.
(Note these are different from quotation marks or apostrophes.) Links are
written [like this](http://example.com/).

Bulleted lists can be written with asterisks:

* Each item starts on a new line with an asterisk.
* Items should start on the beginning of the line.
* Leave blank lines after the end of the list so the list does not continue.

Mathematics can be written with LaTeX syntax using dollar signs. 
For instance, using single dollar signs we can write inline math: $(-b \pm \sqrt{b^2 - 4ac})/2a$.

To write math in "display style", i.e. displayed on its own line centered on the
page, we use double dollar signs:
$$
x^2 + y^2 = 1
$$


### Code blocks

Code blocks are evaluated sequentially when you hit Render. 
As the code runs, `R` prints out which block is running, so naming blocks is useful if you want to know which one takes a long time. 
After the block name, you can specify [chunk options](https://yihui.org/knitr/options/). 
For example, `echo` controls whether the code is printed in the document. 
By default, output is printed in the document in monospace:

```{r, echo = FALSE}
head(mtcars)
```

Chunk options can also be written inside the code block, which is helpful for really long options, as we'll see soon.

```{r}
#| echo: false
head(mtcars)
```

### Figures

If a code block produces a plot or figure, this figure will automatically be inserted inline in the report. That is, it will be inserted exactly where the code block is.

```{r}
#| fig-width: 5
#| fig-height: 3.5
#| fig-cap: "This is a caption. It should explain what's in the figure and what's interesting about it. For instance: There is a negative, strong linear correlation between miles per gallon and horsepower for US cars in the 1970s."

library(tidyverse)
mtcars |> 
  ggplot(aes(x = mpg, y = hp)) +
  geom_point() +
  labs(x = "Miles per gallon",
       y = "Horsepower")
```

Notice the use of `fig-width` and `fig-height` to control the figure's size (in inches). 
These control the sizes given to `R` when it generates the plot, so `R` proportionally adjusts the font sizes to be large enough.

### Tables

Use the `knitr::kable()` function to print tables as HTML:

```{r}
mtcars |> 
  slice(1:5) |> 
  knitr::kable()
```

We can summarize model results with a table. 
For instance, suppose we fit a linear regression model:

```{r}
#| echo: true
model1 <- lm(mpg ~ disp + hp + drat, data = mtcars)
```

It is *not* appropriate to simply print `summary(model1)` into the report. 
If we want the reader to understand what models we have fit and what their results are, we should provide a nicely formatted table. 
A simple option is to use the `tidy()` function from the `broom` package to get a data frame of the model fit, and simply report that as a table.

```{r }
#| results: "asis"
#| tbl-cap: "Predicting fuel economy using vehicle features."

library(broom)
model1 |> 
  tidy() |>
  knitr::kable(digits = 2,
               col.names = c("Term", "Estimate", "SE", "t", "p"))
```