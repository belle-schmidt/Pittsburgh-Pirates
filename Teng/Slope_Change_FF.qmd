---
title: "Slope_change - FF"
format: html
editor: visual
---

## Slope_Change_FF

## Load Data

```{r}
Joined_FanGraphs_Statcast <- read.csv("D:/R files/CMU/Pirates/Joined_FanGraphs_Statcast.csv")
FF_Over_100 <- Joined_FanGraphs_Statcast |>
  filter(times_thrown_FF >100)|>
mutate(swing_and_miss_pct_FF = swing_and_miss_pct_FF / 100) |> 
  rename(swing_and_miss_rate_FF = swing_and_miss_pct_FF)

```

## Velocity

```{r}
# RV with Year and Velocity
RV_Velocity <- lm(run_value_per100_FF ~ factor(Season) : avg_velocity_FF, data = FF_Over_100)
summary(RV_Velocity)
tidy_RV_Velocity <- tidy(RV_Velocity)
```

```{r}
tidy_RV_Velocity %>% filter(term != "(Intercept)") |>
  mutate(term = str_extract(term, "\\d{4}")) |> 
ggplot(aes(x = term, y = estimate)) +
  geom_line(size = 1, group = 1, color = "red") +
  geom_point(color = "black", size = 2) +
  labs(title = "Slope Change over Years for RV and Velocity",
       x = "Year",
       y = "Slope") +
  theme_bw() +
  theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 15),
        axis.title.x = element_text(face = "bold", size = 12),
        axis.title.y = element_text(face = "bold", size = 10),
        axis.text.y = element_text(face = "bold"),
        axis.text.x = element_text(face = "bold", size = 10))
```

```{r}
Stuff_Plus_Velocity <- lm(stuff_plus_stuff_FF ~ factor(Season):avg_velocity_FF, data = FF_Over_100)
summary(Stuff_Plus_Velocity)
tidy_Stuff_Plus_Velocity <- tidy(Stuff_Plus_Velocity)
```

```{r}
tidy_Stuff_Plus_Velocity %>% filter(term != "(Intercept)") |>
  mutate(term = str_extract(term, "\\d{4}")) |> 
ggplot(aes(x = term, y = estimate)) +
  geom_line(size = 1, group = 1, color = "red") +
  geom_point(color = "black", size = 2) +
  labs(title = "Slope Change over Years for Stuff+ and Velocity",
       x = "Year",
       y = "Slope") +
  theme_bw() +
  theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 15),
        axis.title.x = element_text(face = "bold", size = 12),
        axis.title.y = element_text(face = "bold", size = 10),
        axis.text.y = element_text(face = "bold"),
        axis.text.x = element_text(face = "bold", size = 10))
```

## Velocity - Swing and Miss

```{r}
velocity_swing_miss <- lm(swing_and_miss_rate_FF ~ factor(Season) : avg_velocity_FF, 
                data = FF_Over_100) 


summary(velocity_swing_miss)
tidy_velocity_swing_miss <- tidy(velocity_swing_miss)
```

```{r}
tidy_velocity_swing_miss|> 
  mutate(term = str_extract(term, "\\d{4}")) |> 
  filter(term != "(Intercept)") |> 
  ggplot(aes(x = term, y = estimate)) +
  geom_line(size = 1, group = 1, color = "red") +
  geom_point(color = "black", size = 2) +
  labs(title = "Slope Change over Years for Swing and Miss and Velocity",
       x = "Year",
       y = "Slope") +
  theme_bw() +
  theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 12),
        axis.title.x = element_text(face = "bold", size = 12),
        axis.title.y = element_text(face = "bold", size = 8),
        axis.text.y = element_text(face = "bold"),
        axis.text.x = element_text(face = "bold", size = 10))

```

## Velocity - Swing Rate

```{r}
velocity_swing_rate <- lm(swing_rate_FF ~ factor(Season) : avg_velocity_FF, 
                data = FF_Over_100) 


summary(velocity_swing_rate)
tidy_velocity_swing_rate <- tidy(velocity_swing_rate)
```

```{r}
tidy_velocity_swing_rate|> 
  mutate(term = str_extract(term, "\\d{4}")) |> 
  filter(term != "(Intercept)") |> 
  ggplot(aes(x = term, y = estimate)) +
  geom_line(size = 1, group = 1, color = "red") +
  geom_point(color = "black", size = 2) +
  labs(title = "Slope Change over Years for Swing Rate and Velocity",
       x = "Year",
       y = "Slope") +
  theme_bw() +
  theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 12),
        axis.title.x = element_text(face = "bold", size = 12),
        axis.title.y = element_text(face = "bold", size = 8),
        axis.text.y = element_text(face = "bold"),
        axis.text.x = element_text(face = "bold", size = 10))
```

## Velocity - Wiff Rate

```{r}
FF_Over_100 <- FF_Over_100 |>rename(whiff_rate_FF = wiff_rate_FF)
velocity_whiff_rate <- lm(whiff_rate_FF ~ factor(Season) : avg_velocity_FF, 
                data = FF_Over_100) 


summary(velocity_whiff_rate)
tidy_velocity_whiff_rate <- tidy(velocity_whiff_rate)
```

```{r}
tidy_velocity_whiff_rate|> 
  mutate(term = str_extract(term, "\\d{4}")) |> 
  filter(term != "(Intercept)") |> 
  ggplot(aes(x = term, y = estimate)) +
  geom_line(size = 1, group = 1, color = "red") +
  geom_point(color = "black", size = 2) +
  labs(title = "Slope Change over Years for Whiff Rate and Velocity",
       x = "Year",
       y = "Slope") +
  theme_bw() +
  theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 12),
        axis.title.x = element_text(face = "bold", size = 12),
        axis.title.y = element_text(face = "bold", size = 8),
        axis.text.y = element_text(face = "bold"),
        axis.text.x = element_text(face = "bold", size = 10))
```

## Extension

```{r}
# RV with year and Extension
RV_Extension <- lm(scale(run_value_per100_FF) ~ factor(Season) : avg_release_extension_FF, data = FF_Over_100)
summary(RV_Extension)
tidy_RV_Extension <- tidy(RV_Extension)
```

```{r}
tidy_RV_Extension %>% filter(term != "(Intercept)") |>
  mutate(term = str_extract(term, "\\d{4}")) |> 
ggplot(aes(x = term, y = estimate)) +
  geom_line(size = 1, group = 1, color = "red") +
  geom_point(color = "black", size = 2) +
  labs(title = "Slope Change over Years for RV and Extension",
       x = "Year",
       y = "Slope") +
  theme_bw() +
  theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 15),
        axis.title.x = element_text(face = "bold", size = 12),
        axis.title.y = element_text(face = "bold", size = 10),
        axis.text.y = element_text(face = "bold"),
        axis.text.x = element_text(face = "bold", size = 10))
```

```{r}
# Stuff+ with year and Extension
Stuff_Plus_Extension <- lm(scale(stuff_plus_stuff_FF) ~ factor(Season) : avg_release_extension_FF , data = FF_Over_100)
summary(Stuff_Plus_Extension)
tidy_Stuff_Plus_Extension <- tidy(Stuff_Plus_Extension)
```

```{r}
tidy_Stuff_Plus_Extension %>% filter(term != "(Intercept)") |>
  mutate(term = str_extract(term, "\\d{4}")) |> 
ggplot(aes(x = term, y = estimate)) +
  geom_line(size = 1, group = 1, color = "red") +
  geom_point(color = "black", size = 2) +
  labs(title = "Slope Change over Years for Stuff+ and Extension",
       x = "Year",
       y = "Slope") +
  theme_bw() +
  theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 15),
        axis.title.x = element_text(face = "bold", size = 12),
        axis.title.y = element_text(face = "bold", size = 10),
        axis.text.y = element_text(face = "bold"),
        axis.text.x = element_text(face = "bold", size = 10))
```

##Load Data

```{r}
mlb_pitching_stats <- read.csv("D:/R files/CMU/Pirates/mlb_pitching_stats_2020-24.csv")
```

```{r}
mod1 = lm(whiff_rate_FF ~ factor(Season) + avg_v_break_FF + avg_h_break_FF+
          avg_release_extension_FF+avg_velocity_FF+ times_thrown_FF, data = FF_Over_100)
summary(mod1)
```

```{r}
# Install and load the lme4 package
install.packages("lme4")
library(lme4)

# Run the linear mixed-effects model with Season as a random effect
mod2 <- lmer(whiff_rate_FF ~ avg_v_break_FF + avg_h_break_FF + 
             avg_release_extension_FF + avg_velocity_FF + times_thrown_FF + 
             (1 | Season), data = FF_Over_100)

# Display the summary of the model
summary(mod2)

```

```{r}
# Load the lme4 package
library(lme4)

# Define the model with interaction terms between Season and other predictors
mod3 <- lmer(whiff_rate_FF ~ (avg_v_break_FF + avg_h_break_FF + 
                              avg_release_extension_FF + avg_velocity_FF + times_thrown_FF) * factor(Season) + 
                              (1 | Season), data = FF_Over_100)

# Display the summary of the model
summary(mod3)

```

```{r}
# Install and load the mgcv package
library(mgcv)

# Fit a GAM with smooth terms and interactions with Season
mod_gam <- gam(whiff_rate_FF ~ s(avg_v_break_FF) + s(avg_h_break_FF) +
               s(avg_release_extension_FF) + s(avg_velocity_FF) + s(times_thrown_FF) +
               factor(Season), data = FF_Over_100)

# Display the summary of the model
summary(mod_gam)

```

```{r}
# Assuming your data has a column named 'Season'
unique_seasons <- unique(FF_Over_100$Season)

# Initialize a list to store models
models <- list()

# Loop through each season and fit the model
for (season in unique_seasons) {
  # Subset data for the current season
  data_season <- subset(FF_Over_100, Season == season)
  
  # Fit the linear model
  model <- lm(whiff_rate_FF ~ avg_v_break_FF + avg_h_break_FF + 
              avg_release_extension_FF + avg_velocity_FF + times_thrown_FF, 
              data = data_season)
  
  # Store the model in the list
  models[[as.character(season)]] <- model
}

# Display the summary for each model
for (season in names(models)) {
  cat("Season:", season, "\n")
  print(summary(models[[season]]))
  cat("\n\n")
}

```

```{r}
# Extract coefficients for each season and predictor
# Assuming your data has a column named 'Season'
unique_seasons <- unique(FF_Over_100$Season)

# Initialize a list to store models
models <- list()

# Loop through each season and fit the model
for (season in unique_seasons) {
  # Subset data for the current season
  data_season <- subset(FF_Over_100, Season == season)
  
  # Fit the linear model
  model <- lm(whiff_rate_FF ~ avg_v_break_FF + avg_h_break_FF + 
              avg_release_extension_FF + avg_velocity_FF, 
              data = data_season)
  
  # Store the model in the list
  models[[as.character(season)]] <- model
}

# Extract coefficients for each season and predictor, excluding the intercept
coef_list <- lapply(models, function(mod) coef(mod)[-1])  # Remove the intercept
coef_df <- do.call(rbind, lapply(names(coef_list), function(season) {
  coef <- coef_list[[season]]
  data.frame(Season = season, Predictor = names(coef), Coefficient = coef)
}))

# Load ggplot2 for visualization
library(ggplot2)

# Plot the coefficients for each predictor across seasons, excluding the intercept
ggplot(coef_df, aes(x = Predictor, y = Coefficient, color = Season, group = Season)) +
  geom_point() +
  geom_line() +
  labs(title = "Coefficient Estimates by Season (Excluding Intercept)",
       x = "Predictor",
       y = "Coefficient Estimate") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```
